<!-- This is an R Markdown (.Rmd) file made for rendering in RStudio® -->

---
title: "INTEGRATED IV- Group 2: Cell Growth and Differentiaton: RNA_seq analysis with R"
author: "Gómez O.; Montalbán, SM.; Ostolaza, M.; Sánchez, M"
date: "2nd Year in Biomedicine - Integrated Project IV - 2024/25"
output: 
  html_document:
    toc: true
    toc_depth: 5
    toc_float: 
      collapsed: false
      smooth_scroll: true
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

### General specifications
```{r echo=FALSE, results='hide',message=FALSE}
#Load packages:
library(ggplot2)
library(DESeq2)
library(edgeR)
library(ggplot2)
library(knitr)

library(EnhancedVolcano)
library(pheatmap)
library(topGO)
library(org.Hs.eg.db)

#in case you need to dowload the librarires some of them aren't in CRAA repository copy the following code(Run only once!):
##################From bioconductor:
##Deseq2
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("DESeq2")
#EnhancedVolcano
BiocManager::install('EnhancedVolcano')
#or 
devtools::install_github('kevinblighe/EnhancedVolcano')
##edgeR
BiocManager::install("edgeR")
#topGO
BiocManager::install("topGO")
#clusterProfiler
BiocManager::install("clusterProfiler")
#org.Hs.eg.db
BiocManager::install("org.Hs.eg.db")
##############From CRAN:
##ggplot2
install.packages("ggplot2")
##pheatmap
install.packages("pheatmap")
#knitr
install.packages("knitr")



```
## 1.PRE DATA PROCESSING AND GLOBAL UNDERSTANDING 


### 1.1 Data Loading
Data from: https://pmc.ncbi.nlm.nih.gov/articles/PMC9687758/#biomolecules-12-01693-f005. 
For introducing the data (raw count matrix and metadata), it is necessary to set the working directory:
```{r}
setwd("/Users/sanumaya/Downloads/B2 group")
```

Loading the data obtained by galaxy (Feature counts annotated)
```{r}

SRR21709659 <- read.delim("/Users/sanumaya/Downloads/galaxyB2 group/SRR21709659.tabular", row.names=1)
SRR21709660 <- read.delim("/Users/sanumaya/Downloads/galaxyB2 group/SRR21709660.tabular", row.names=1)
SRR21709661 <- read.delim("/Users/sanumaya/Downloads/galaxyB2 group/SRR21709661.tabular", row.names=1)
SRR21709662 <- read.delim("/Users/sanumaya/Downloads/galaxyB2 group/SRR21709662.tabular", row.names=1)

SRR21709663 <- read.delim("/Users/sanumaya/Downloads/galaxyB2 group/SRR21709663.tabular", row.names=1)
SRR21709664 <- read.delim("/Users/sanumaya/Downloads/galaxyB2 group/SRR21709664.tabular", row.names=1)
SRR21709665 <- read.delim("/Users/sanumaya/Downloads/galaxyB2 group/SRR21709665.tabular", row.names=1)
SRR21709666 <- read.delim("/Users/sanumaya/Downloads/galaxyB2 group/SRR21709666.tabular", row.names=1)


```

* Joining the different table of counts:
    * C bind function can only be used when rows number are the same
    * It is important to check that all tables have the same number of rows (using nrows() function), since it is required for cbind() function. 

    
```{r}
counts_all <- cbind(SRR21709659, SRR21709660)
counts_all <- cbind(counts_all, SRR21709661)
counts_all <- cbind(counts_all, SRR21709662)
counts_all <- cbind(counts_all, SRR21709663)
counts_all <- cbind(counts_all, SRR21709664)
counts_all <- cbind(counts_all, SRR21709665)
counts_all <- cbind(counts_all, SRR21709666)
```

* Loading metadata

```{r}
metadata <- read.csv2("Metadata.csv", dec = ",", row.names = 1)
```

In order to perform deseq2 metadata rows and column names need to be the same:
```{r}
rownames(metadata) %in% colnames (counts_all) 

#exploration of the matryx
counts_all[1:25, ]
dim(counts_all)

head(metadata)
table(metadata$Condition)
```


### 1.2 General Exploration
* In order to observe how the count matrix is organized, the 25 first rows were explored. 

```{r}
counts_all[1:25, ]
```

* Another tool, for general exploration to determine how many rows and columns the count matrix has:

```{r}
dim(counts_all)
```

* Per condition (treatment and control) there are 4 individuals. 

```{r}
table(metadata$Condition)
```
```
### 1.3 Normalisation
A general exploration of the library size was performed, to see whether there are any major discrepancies between the samples.
RNAseq data is not normally distributed. Prior to differential gene expression analysis, the count matrix should be normalized.


```{r}

barplot(colSums(counts_all),las=2, cex.names = 0.6)
# Add a title to the plot
title("Barplot of library sizes")
# At first sight, it is possible to say that there are not major discrepancies between samples. 
# More or less all bars at the same level. 
`Library size's numbers: 

```{r}
colSums(counts_all)
```

Creation of a data frame only containing  the numbers of the library size: 

```{r}
df_library <- as.data.frame(colSums(counts_all))
# df_library --> for visualising the data frame that was created 
```

As mentioned RNA-seq data is not normally distributed. Prior to differential gene expression analysis, the count matrix should be normalized. This can be done using the Computation of Counts Per Million Reads (CPM) function. 

* Computation of counts per million (CPMs) with the edgeR package:

```{r}
CPM <- cpm(counts_all)
# CPM[1:5, 1:5] --> to visualise the CPM data frame
```

### 1.4 Heatmap exploration: 

Clustering/Heatmap
Briefly, clustering algorithms allow to group the observations and/or variables in our dataset, according to their similarity (dissimilarity). The latter can be measured in many different ways (e.g. Euclidean distance, correlation, etc.). Clustering is helpful to identify subgroups of individuals, outliers and batch effects. 

```{r}
pheatmap(log2(CPM + 1), 
         show_rownames = F, 
         annotation_col = metadata)
```

### 1.5 DESeq2 object creation 

As it was mentioned, the RNA-seq data has no normal distribution and the application of parametric tests to compare expression of genes such as the T-test can not be adequate. With packages such as DESeq2 and edgeR a proper analysis including the normalization of the data can be carried out.  

With DESeq2 models, a negative binomial distribution is considered. There is no need to filter or check for any distribution. 

Creating a DESeq2 object: combination of the counts and metadata information in a single object. 
**IMPORTANT:** It is advisable, to indicate the design of your analysis including the variables of interest.

```{r}
# This function has several arguments. 1. With input we need
#For paired data, it is included here the id variable: design = Patient.ID + condition
dds <- DESeqDataSetFromMatrix(countData = counts_all,
                              colData = metadata,
                              design = ~ Patient_ID + Condition)

dds$Condition <- relevel(dds$Condition, ref = "Control") # To determine the reference
```

### 1.6 PCA exploration: 

Principal Component Analysis (PCA) is a technique used to emphasize variation and bring out strong patterns in a dataset (dimensionality reduction). Before plotting in a PCA it is necessary to normalize first. In this case rlog normalization will be used.

Rlog normalization. This function transforms the count data to the log2 scale in a way which minimizes differences between samples for rows with small counts, and which normalizes with respect to library size (number of sequences obtained after sequencing).

```{r}
rsel <- rlog(dds, blind=TRUE)
```

Obtention of the PCA plot: 

```{r}
pc <- prcomp(t(assay(rsel))) 
pca <- as.data.frame(pc$x) # save as data frame
pca$SampleID <- rownames(metadata)
pca$Condition <- metadata$Condition # colorejar , el nom de variable que tinguem
pca$Patient_ID <- metadata$Patient_ID
vars <- sprintf('%.1f %%',(pc$sdev)^2/sum(pc$sdev^2)*100)


PCA <- ggplot(pca, aes(PC1, PC2)) +
  geom_point(aes(colour = factor(Patient_ID), shape = factor(Condition)), size = 4) +
  scale_color_manual(values=terrain.colors(n=5)) +
  theme_bw() + labs(title = "PCA", y =paste0("PCA2:",vars[2]), x = paste0("PCA1:",vars[1]))+
  labs(tittle = "PCA", colour = "Patient ID", shape = "Condition")
PCA
```

## 2. DIFFERENTIAL EXPRESSION (DE) ANALYSIS WITH DESeq2

Calculation of the differential expressed genes with DESeq2 method:

```{r}
# Apply DESEeq2 method: this sample normalises the data and builts the statistical models to make the differential expression tests. The design was indicated in the 1.5 DESeq2 object creation section. 
dds <- DESeq(dds)

# Save the results in a variable 
res <- results(dds)
```

Create a data frame with the results, in order to visualise them:

```{r}
df <- data.frame(results(dds))
# head(df) --> to visualise the data frame that presents 6 variables
```

One of the variables from these results, is Adjusted p-values (padj). The p-value stands for probability value; it indicates how likely it is that a result occured by chance. If the p-value is small, it indicates the results was unlikely to have occured by chance alone. These results are knwon as being statistically significant. 

Another variable is the log2FoldChange. The Fold change is a measure describing how much a quantity changes going from an initial to a final value or to one condition to another one. 

How many adjusted p values are less than 0.05 (significant)?: 

```{r}
res01 <- results(dds, alpha=0.05)
summary(res01)
#convert it as a dataframe:

res_sig <- as.data.frame(res01)
```

**IMPORTANT**: NA values correspond to filtered genes, that are lowly expressed in a few samples. 

With these data frame it is possible to say that 406 genes are up-regulated and 377 genes are down-regulated. This is possible to known for the LFC (Log Fold Change); one one hand, when it is positive represents that genes are up-regulated at the treatment condition respect control one (as it was mentioned in section 1.5, the control values are the reference). On the other hand, genes are down-regulated in treatment, when LFC presents negative valuee. 

### 2.1 Volcano plot exploration

To observe the results from the diferential expressed analysis, a Volcano plot was generated: 

```{r}
EnhancedVolcano <- EnhancedVolcano(res, lab = rownames(res), x = 'log2FoldChange', y = 'padj',
                                            labSize = 2,  pointSize = 1.5, xlim = c(-7,7),ylim = c(0,30),FCcutoff = 0.58, pCutoff = 0.05, title = "Volcano Plot Control vs Treatment")

EnhancedVolcano
```

### 2.2 Heatmap exploration with DE genes

With this input, a second heatmap was performed considering only differential expressed genes: 

Before doing it, is important to filter the genes tha presents a padj less than 0.05, indicating statistical significance, in order to reduce background noisse: 

```{r}
res_df <- as.data.frame(res)

# Filter by padj < 0.05
res_filtered <- res_df[which(res_df$padj < 0.05),]
```


```{r}
data_counts <- log2(CPM + 1)
data_counts <- subset(data_counts, rownames(data_counts) %in% rownames(res_filtered))
pheatmap(data_counts, 
         show_rownames = F, 
         annotation_col = metadata)
```

## 3. GO ENRICHMENT

To accomplish the aim of this article, Gene Ontology (GO) knowledgebase was used in order to define the functions. This tool is useful to determine whether there is any biological function overrepresented among our differentially expressed genes. Moreover GO knowledgebases is the world’s largest source of information on the functions of genes. 

An statistical test needs to be performed (e.g. hypergeometric test, Fisher test) for each function. Briefly, the test will tell if the number of genes associated to a pathway in our set is significantly larger than what would be expected by chance. Hence, for each function a P-value will be got, that it has to compare with the significance threshold (usually α = 0.05). In addition, it is necessary to correct for the fact of multiple testing functions (e.g. via False Discovery Rate).All these steps are performed using the topGO R package.

```{r}
# topGO requires all genes as a named list of P-values, plus a function to select significant genes (see below)
# in this case 'allGenes' or the 'universe' of genes are all the genes that have been tested in the DE analysis 

#Create a res table without the NAs:
res_ok <- na.omit(res)
allGenes <- res_ok$padj # filtered by adjusted p-value
names(allGenes) <- rownames(res_ok)

# Create topGO object
GOdata <- new("topGOdata",
              ontology = "BP",                 # 'Biological Process' domain of GO 
              allGenes = allGenes,             # The 'universe' of genes
              geneSel = function(p){p < 0.05}, # Define function (selects genes with adjusted P-values below 0.05)
              annotationFun = annFUN.org,      # Function to map gene IDs to GO terms
              mapping = "org.Hs.eg.db",        # H. sapiens annotation
              ID = "entrez")                   # The identifier used for the genes, "entrez gene IDs"

# Run Fisher test  
resultFisher <- runTest(GOdata, algorithm = "classic", statistic = "fisher")

# Results (top 100)
GOres <- GenTable(GOdata, classicFisher = resultFisher, topNodes = 100) 
```

For visualasing the top 6 biological processes: 

```{r}
head(GOres)
```

## 4. SAVE THE ANALYSIS

Save all the objects (Tables, variables, etc) from the current environment. To not repeat the run every time you open the document:

```{r}
# To save
#save.image("/Users/sanumaya/Downloads/B2 group"/"RNA-seq analysis with R.RData")
# To load the data next time the document is opened
#load(("/Users/sanumaya/Downloads/B2 group"/"RNA-seq analysis with R.RData"))
```

For reproducibility of this analysis, the following packages, corresponding version and R version are shown with the function sessionInfo(). Also, this can be save:

```{r}
sessionInfo()
# To save 
# sinf <- sessionInfo()
```

